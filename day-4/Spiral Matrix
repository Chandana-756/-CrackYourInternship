class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<>();

        if(matrix.length == 0){
            return result;
        }
        int rowBegin = 0;
        int rowEnd = matrix.length - 1;
        int colBegin = 0;
        int colEnd = matrix[0].length - 1;

        while(rowBegin <= rowEnd && colBegin <= colEnd){
            for(int i = colBegin; i<=colEnd; i++){
                result.add(matrix[rowBegin][i]);
            }
            rowBegin++;

            //Traverse Down
            for(int j = rowBegin; j <= rowEnd; j++){
                result.add(matrix[j][colEnd]);
            }
            colEnd--;

            //Traverse Left
            if(rowBegin <= rowEnd){
                for(int j = colEnd; j >= colBegin; j--){
                    result.add(matrix[rowEnd][j]);
                }
                rowEnd--;
            }

            //Traverse Up
            if(colBegin <= colEnd){
                for(int j = rowEnd; j >= rowBegin; j--){
                    result.add(matrix[j][colBegin]);
                }
                colBegin++;
            }
        }
        return result;
    }
}

Time Complexity: O(m x n)
Space Complexity: O(1)
